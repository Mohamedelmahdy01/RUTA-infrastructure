name: Deploy Infrastructure and Application

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'ansible/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-west-2
  TF_VERSION: "1.5.0"
  ANSIBLE_VERSION: "8.0.0"

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.terraform_action == 'plan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="project_name=${{ github.event.inputs.environment || 'staging' }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}" \
            -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.terraform_action == 'apply'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Get Terraform Outputs
        working-directory: ./terraform
        run: |
          terraform output -json > outputs.json
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_backend_public_ip)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/outputs.json

  ansible-deploy:
    name: Ansible Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.terraform_action == 'apply'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: ./

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install "ansible==${{ env.ANSIBLE_VERSION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          EC2_IP=$(python -c "import json; data=json.load(open('outputs.json')); print(data['ec2_backend_public_ip']['value'])")
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: Get RDS Endpoint
        id: get-rds
        run: |
          RDS_ENDPOINT=$(python -c "import json; data=json.load(open('outputs.json')); print(data['rds_endpoint']['value'])")
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Generate Ansible Inventory
        run: |
          cat > ansible/inventory.ini << EOF
          [backend]
          ${{ steps.get-ip.outputs.ec2_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
          EOF

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.ec2_ip }} >> ~/.ssh/known_hosts

      - name: Wait for EC2 to be ready
        run: |
          until ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no ubuntu@${{ steps.get-ip.outputs.ec2_ip }} 'echo "EC2 is ready"'; do
            echo "Waiting for EC2 instance to be ready..."
            sleep 30
          done

      - name: Run Ansible Playbook
        working-directory: ./ansible
        run: |
          ansible-playbook \
            -i inventory.ini \
            playbook.yml \
            --extra-vars "db_host=${{ steps.get-rds.outputs.rds_endpoint }}" \
            --extra-vars "db_name=${{ secrets.DB_NAME }}" \
            --extra-vars "db_user=${{ secrets.DB_USER }}" \
            --extra-vars "db_pass=${{ secrets.DB_PASSWORD }}" \
            -vv

      - name: Health Check
        run: |
          sleep 30
          curl -f http://${{ steps.get-ip.outputs.ec2_ip }} || exit 1

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.terraform_action == 'destroy'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          terraform destroy \
            -var="project_name=${{ github.event.inputs.environment || 'staging' }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}" \
            -auto-approve
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }} 