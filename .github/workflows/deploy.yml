name: Deploy Infrastructure and Application

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'ansible/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-west-2
  TF_VERSION: "1.5.0"
  ANSIBLE_VERSION: "8.0.0"
  SLACK_CHANNEL: "deployments"

jobs:
  pre-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Slack - Workflow Started
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            :rocket: *Deployment Initiated* 
            *Repo*: ${{ github.repository }}
            *Environment*: ${{ github.event.inputs.environment || 'staging' }}
            *Action*: ${{ github.event.inputs.terraform_action || 'apply' }}
            *By*: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: pre-checks
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply')) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format and Fix
        working-directory: ./terraform
        run: terraform fmt -recursive 

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          ENVIRONMENT="${{ needs.pre-checks.outputs.environment }}"
          terraform plan \
            -var="project_name=$ENVIRONMENT" \
            -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}" \
            -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

      - name: Slack - Plan Complete
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            :blue_book: *Terraform Plan Complete*
            *Environment*: ${{ needs.pre-checks.outputs.environment }}
            *Details*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  production-approval:
    name: Production Approval
    if: ${{ (needs.pre-checks.outputs.environment == 'production') && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main') }}
    needs: [pre-checks, terraform-plan]
    runs-on: ubuntu-latest
    
    steps:
      - name: Request Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS || 'team-leads' }}
          minimum-approvals: 1
          issue-title: "Approval required for production deployment"
          issue-body: |
            Please review the Terraform plan and approve this production deployment.
            
            **Plan Artifact**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Approve by commenting: `/approve`

      - name: Slack - Approval Requested
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            :hourglass: *Production Approval Required*
            *Repository*: ${{ github.repository }}
            *Run*: #${{ github.run_number }}
            *Plan*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            *Approvers*: ${{ secrets.PRODUCTION_APPROVERS || 'team-leads' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: 
      - pre-checks
      - terraform-plan
      - production-approval
    if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply') }}
    environment: ${{ needs.pre-checks.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: ./terraform
        run: |
          terraform output -json > outputs.json
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_backend_public_ip)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/outputs.json

      - name: Slack - Apply Complete
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            :white_check_mark: *Infrastructure Deployed*
            *Environment*: ${{ needs.pre-checks.outputs.environment }}
            *Details*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  ansible-deploy:
    name: Ansible Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply') }}
    environment: ${{ needs.pre-checks.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: tf-outputs/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install "ansible==${{ env.ANSIBLE_VERSION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          EC2_IP=$(jq -r '.ec2_backend_public_ip.value' tf-outputs/outputs.json)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

      - name: Get RDS Endpoint
        id: get-rds
        run: |
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value' tf-outputs/outputs.json)
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Generate Ansible Inventory
        run: |
          cat > ansible/inventory.ini << EOF
          [backend]
          ${{ steps.get-ip.outputs.ec2_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/deploy_key
          EOF

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.get-ip.outputs.ec2_ip }} >> ~/.ssh/known_hosts

      - name: Wait for EC2 to be ready
        run: |
          until nc -zv ${{ steps.get-ip.outputs.ec2_ip }} 22; do
            echo "Waiting for SSH port 22..."
            sleep 10
          done

      - name: Run Ansible Playbook
        working-directory: ./ansible
        run: |
          ansible-playbook \
            -i inventory.ini \
            playbook.yml \
            --extra-vars "db_host=${{ steps.get-rds.outputs.rds_endpoint }}" \
            --extra-vars "db_name=${{ secrets.DB_NAME }}" \
            --extra-vars "db_user=${{ secrets.DB_USER }}" \
            --extra-vars "db_pass=${{ secrets.DB_PASSWORD }}"

      - name: Health Check
        run: |
          sleep 30
          curl -f http://${{ steps.get-ip.outputs.ec2_ip }} || exit 1

      - name: Slack - Deployment Status
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            ${{ job.status == 'success' && ':rocket: *Application Deployed*' || ':x: *Deployment Failed*' }}
            *Environment*: ${{ needs.pre-checks.outputs.environment }}
            *URL*: http://${{ steps.get-ip.outputs.ec2_ip }}
            *Logs*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  track-deployment:
    name: Track Deployment
    runs-on: ubuntu-latest
    needs: ansible-deploy
    if: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get deployment URL
        id: deployment-url
        run: |
          DEPLOYMENT_URL="http://${{ needs.ansible-deploy.outputs.ec2_ip }}"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "::notice::Application deployed to: $DEPLOYMENT_URL"
          
      - name: Create GitHub Deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const ref = context.ref;
            const environment = '${{ needs.pre-checks.outputs.environment }}';
            
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref,
              environment,
              auto_merge: false,
              required_contexts: [],
              description: `Deployed via GitHub Actions to ${environment}`,
            });
            
            return deployment.data.id;
            
      - name: Update Deployment Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const deploymentId = ${{ steps.create-deployment.outputs.result }};
            const environment = '${{ needs.pre-checks.outputs.environment }}';
            const deploymentUrl = '${{ steps.deployment-url.outputs.deployment_url }}';
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deploymentId,
              state: 'success',
              environment_url: deploymentUrl,
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }}`,
              description: `Deployment to ${environment} succeeded`
            });
            
            console.log(`Deployment status updated: ${deploymentUrl}`);
            
      - name: Post Deployment Notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ needs.pre-checks.outputs.environment }}';
            const deploymentUrl = '${{ steps.deployment-url.outputs.deployment_url }}';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number || context.payload.workflow_run.pull_requests[0]?.number,
              body: `✅ Application deployed to ${environment} environment!\n\n` +
                    `**URL**: ${deploymentUrl}\n` +
                    `**Commit**: ${context.sha.substring(0, 7)}\n` +
                    `**Run**: #${{ github.run_number }}`
            });

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy' }}
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          terraform destroy \
            -var="project_name=$ENVIRONMENT" \
            -var="ec2_key_name=${{ secrets.EC2_KEY_NAME }}" \
            -auto-approve
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Slack - Destroy Notification
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ env.SLACK_CHANNEL }}
          slack-message: |
            ${{ job.status == 'success' && ':wastebasket: *Resources Destroyed*' || ':x: *Destroy Failed*' }}
            *Environment*: ${{ github.event.inputs.environment || 'staging' }}
            *Logs*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
